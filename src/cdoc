#!/usr/bin/perl -w

use strict;
use Text::Markdown 'markdown';
use Getopt::Long;

our $state = 'null';
our $data  = '';
our @stream = ();
our %frag = ();

our %opts = ();
our $V = 0;

sub debug1 { if ($V >= 1) { print STDERR @_; } }
sub debug2 { if ($V >= 2) { print STDERR @_; } }

sub get_options()
{
	my $theme   = '';
	my $header  = '';
	my $footer  = '';
	my $css     = '';
	my $help    = 0;
	my $strip   = './';
	Getopt::Long::Configure('bundling');
	GetOptions(
		'strip=s'  => \$strip,
		's=s'      => \$strip,

		'header=s' => \$header,
		'H=s'      => \$header,

		'footer=s' => \$footer,
		'F=s'      => \$footer,

		'css=s'    => \$css,
		'C=s'      => \$css,

		'theme=s'  => \$theme,
		'T=s'      => \$theme,

		'verbose+' => \$V,
		'v+'       => \$V,

		'help'     => \$help,
		'h'        => \$help
	);

	if ($theme ne '') {
		if ($header eq '') { $header = "$theme/header.html"; }
		if ($footer eq '') { $footer = "$theme/footer.html"; }
		if ($css    eq '') { $css    = "$theme/style.css";   }
	}

	$opts{header} = $header;
	$opts{footer} = $footer;
	$opts{css}    = $css;
	$opts{strip}  = $strip;

	debug1 "Setting verbosity to $V\n";

	if ($help) {
		print "$0 - C Documentor\n";
		print "USAGE: $0 [options] file [ file ... ]\n";
		print "\n";
		print "Options:\n";
		print " --strip path   Path component to remove from source file names.\n";
		print " -s path\n";
		print "\n";
		print " --theme dir    Override the default header, footer and CSS content\n";
		print " -T dir         by using the `header.html', `footer.html' and `style.css'\n";
		print "                files found in dir; a rudimentary form of theming.\n";
		print "\n";
		print "                Note: the -H, -F and -C options override -T.\n";
		print "\n";
		print " --header file  Specify an alternate HTML fragment to use for\n";
		print " -H file        the beginning chunk of the output document.\n";
		print "                If not specified, a suitable default (bundled with\n";
		print "                cdoc) will be used.\n";
		print "\n";
		print " --footer file  Specify an alternate HTML fragment to use for\n";
		print " -F file        the ending chunk of the output document.\n";
		print "                If not specified, a suitable default (bundled with\n";
		print "                cdoc) will be used.\n";
		print "\n";
		print " -css file      Specify an alternate Cascading Stylesheet for the\n";
		print " -C file        output document.  If not specified, a suitable default\n";
		print "                (bundled with cdoc) will be used.\n";
		print "\n";
		print " --help, -h     Show this help screen.\n";
		print "\n";
		print " --verbose      Generate more output; can be used more than once.\n";
		print " -v\n";
		print "\n";
		exit(0);
	}
}

sub fragments()
{
	my %h = ();
	my $key = ''; my $val = '';
	while (<DATA>) {
		if (m/^-[a-z]+-{6,}/) {
			if ($val ne '') { $h{$key} = $val; }

			chomp;
			s/^-([a-z]+)-{6,}/$1/;
			$key = $_;
			$val = '';
			next;
		}
		$val .= $_;
	}
	if ($val ne '') { $h{$key} = $val; }
	close DATA;

	# Override from %opts
	if ($opts{header} ne '') { $h{header} = getfile($opts{header}); }
	if ($opts{footer} ne '') { $h{footer} = getfile($opts{footer}); }
	if ($opts{css}    ne '') { $h{css}    = getfile($opts{css});    }

	return %h;
}

sub bail($)
{
	my $error = shift;
	print "$error\n";
	exit(3);
}

sub putfile($$)
{
	my $file = shift;
	my $data = shift;

	my $fh;
	open  $fh, ">$file";
	print $fh $data;
	close $fh;
}

sub getfile($$)
{
	my $file = shift;
	my $data = '';

	my $fh;
	open  $fh, "<$file" or bail("$file: $!");
	while (<$fh>) { $data .= $_; }
	close $fh;

	return $data;
}

sub is_typedef_struct($)
{
	$_ = shift;
	return m/^typedef\s+struct/;
}

sub is_struct($)
{
	$_ = shift;
	return m/^struct\s+\S+\s*{/;
}

sub is_macro($)
{
	$_ = shift;
	return m/^#define \w+\s*\(/;
}

sub filename($)
{
	my $_ = shift;
	s/^$opts{strip}//;
	return $_;
}

sub proto($)
{
	$_ = shift;
	if (is_typedef_struct $_) {
		s/\s*{.*}\s+(\w+);.*/ { ... } $1/s;
		return $_;
	}
	if (is_macro $_) {
		s/^#define\s*([^\)]+\)).*/$1/s;
		return $_;
	}
	s/\s+{.*//s;
	return $_;
}

sub objkey($)
{
	$_ = shift;
	if (is_typedef_struct $_) {
		s/typedef\s+struct\s+{.*}\s+(\w+);.*/$1/s;
		return $_;
	}
	if (is_struct $_) {
		s/\s+{.*//s;
		return $_;
	}
	if (is_macro $_) {
		s/^#define\s*([^\(]+)\(.*/$1/s;
		return $_;
	}
	#if (m/^struct\s+\S+$/) { return $_; }
	s/\s+{.*//s;
	s/\s*\(.*//;
	s/.*\s+\**//;
	return $_;
}

sub key2id($)
{
	$_ = shift;
	s/\s+/-/g;
	return $_;
}

sub pretty($)
{
	$_ = shift;
	s/\$([a-zA-Z0-9_]+)/<var>$1<\/var>/g;
	s/<code>/<pre><code>/g;
	s/<\/code>/<\/code><\/pre>/g;
	s/(<pre><code>)\s*\n/$1/gs;
	s/#([a-z0-9_]+)/<a href="#$1">$1<\/a>/g;
	s/\s*\n\s*(<\/code><\/pre>)/$1/gs;
	return markdown($_);
}

sub summary($)
{
	$_ = shift;
	s/\n\n+.*//s;
	return $_;
}

sub detail($)
{
	$_ = shift;
	s/[^\n]*\n\n+//;
	return $_;
}

sub mapstream
{
	my %map = ();
	my $h; my $k;
	my $comment = '';
	my $file = '';
	my $line = 0;

	for (@_) {
		my ($op, $s) = @{$_};
		if ($op eq 'comment') {
			$comment = $s;
		} elsif ($op eq 'file') {
			$file = filename($s);
		} elsif ($op eq 'line') {
			$line = $s;
		} elsif ($comment ne '') {
			$h = {};
			$k = objkey($s);
			if (is_typedef_struct($s) or is_struct($s)) {
				$h->{type} = 'struct';
				$k = "001:$k";
			} else {
				$h->{type} = 'function';
				$k = "050:$k";
			}
			$h->{file}      = $file;
			$h->{line}      = $line;
			$h->{summary}   = summary($comment);
			$h->{comment}   = detail($comment);
			if ($h->{comment} eq $h->{summary}) {
				$h->{comment} = '';
			}
			$h->{prototype} = proto($s);
			$h->{code}      = $s;
			$map{$k} = $h;

			$comment = '';
		}
	}

	return %map;
}

sub parsefile($)
{
	my $file = shift;

	push @stream, ['file', $file];
	my $io;
	open  $io, "<$file";
	parse($io);
	close $io;
}

sub parse($)
{
	my $io = shift;
	my $n = 0; my $line = 0;
	my $type = '';
	my $proto = '';

	while (<$io>) {
		$n++;
		s/\r//g;
		if (m/^\/\*\*/) { # are we at the start of a comment?
			s/^\/\*\*\s+//;
			if (m/\*\/$/) { # is it a single-line comment?
				s/\s*\*\/$//;
				push @stream, ['comment', $_];
				$state = 'code'; $data = ''; $line = $n;
			} else {
				$state = 'comment';
				$data = '';
			}
			next;
		}

		if ($state eq 'comment') {
			if (m/^\s*\*\/$/) {
				push @stream, ['comment', $data];
				$state = 'code'; $data = ''; $line = $n;
				next;
			}
			$data .= $_;
			next;
		}

		if ($state eq 'code') {
			if ($data eq '') {
				$type = m/^#define/ ? 'macro' : 'other';
			}
			$data .= $_;
			if (($type ne 'macro' and /^}(\s+\w+)?;?$/)
			 || ($type eq 'macro' and /^\s*$/)) {
				push @stream, ['line', $line+1];
				push @stream, ['code', $data];

				$proto = objkey($data);
				debug2 "  - $proto\n";

				$state = 'null'; $data = '';
				next;
			}
		}
	}

	$state = 'null'; $data = '';
}

sub output()
{
	print $frag{header};
	my %map = mapstream(@stream);
	for my $name (sort keys %map) {
		my %o = %{$map{$name}};
		$name =~ s/.\d+://;

		$o{comment} = pretty($o{comment});
		$o{summary} = pretty($o{summary});
		$o{summary} =~ s/<p>/<p class="summary">/;

		print "    <div class=\"doc $o{type}\" id=\"", key2id($name), "\">\n";
		print "      <h2>$name</h2>\n\n";
		if ($o{type} ne 'struct') {
			print "      <p class=\"prototype\">$o{prototype}</p>\n\n";
		}
		print $o{summary};
		if ($o{type} eq 'struct') {
			print "      <pre class=\"struct\">$o{code}</pre>\n";
		}
		print $o{comment};
		print "\n";
		if ($o{type} ne 'struct') {
			print "      <a href=\"#\" class=\"source\"><code>$o{file}:$o{line}</code></a>\n";
			print "      <pre class=\"source\" id=\"src_$name\"><code>$o{code}</code></pre>\n\n";
		} else {
			print "      <code>$o{file}:$o{line}</code>\n";
		}
		print "    </div>\n\n";
	}
	print $frag{footer};
}

get_options();
if (@ARGV == 0) { bail "No source files given."; }

%frag = fragments();
for my $f (@ARGV) {
	debug1 "> $f...\n";
	parsefile($f);
}

output();
putfile "cdoc.css", $frag{css};
putfile "cdoc.js",  $frag{js};

